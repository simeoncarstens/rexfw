'''
Swap list generators
'''

from abc import ABCMeta, abstractmethod
from collections import namedtuple

ExchangeParams = namedtuple('ExchangeParams', 'proposers proposer_params')
# LMDRENSParams = namedtuple('LMDRENSParams', 'n_steps timestep gamma pdf_params')
# AMDRENSParams = namedtuple('AMDRENSParams', 'n_steps timestep collision_probability update_interval')
# HMCStepRENSParams = namedtuple('HMCStepRENSParams', 'n_intermediate_steps timestep')


class AbstractSwapListGenerator(object):

    __metaclass__ = ABCMeta
    
    @abstractmethod
    def generate_swap_list(self, step):
        pass

    
class StandardSwapListGenerator(AbstractSwapListGenerator):

    _which = 0
    
    def __init__(self, n_replicas, param_list):

        self._n_replicas = n_replicas
        self._replica_list = ['replica{}'.format(i) for i in range(1, self._n_replicas + 1)]
        self._proposer_list = ['prop{}'.format(i) for i in range(1, self._n_replicas + 1)]
        self._param_list = param_list
        
    def generate_swap_list(self, step):

        if len(self._replica_list) == 2:
            self._which = 0
        swap_list = zip(self._replica_list[self._which::2],
                        self._replica_list[self._which + 1::2],
                        self._param_list[self._which::2])
        self._which = int(not self._which)

        return swap_list

    
# class REStandardSwapListGenerator(StandardSwapListGenerator):

#     def __init__(self, n_replicas):

#         param_list = [REExchangeParams(['prop{}'.format(i), 'prop{}'.format(i+1)], REProposerParams()) 
#                       for i in range(1, n_replicas)]
#         super(REStandardSwapListGenerator, self).__init__(n_replicas, param_list)


# class HMCStepRENSStandardSwapListGenerator(StandardSwapListGenerator):

#     def __init__(self, n_replicas, timesteps, n_intermediate_steps, switched_param_names):

        
#         prop_params = [HMCStepRENSProposerParams(timesteps[i], n_intermediate_steps)
#                        for i in range(n_replicas - 1)]
#         param_list = [ExchangeParams(['prop{}'.format(i), 'prop{}'.format(i+1)], prop_params[i-1]) 
#                       for i in range(1, n_replicas)]
#         super(HMCStepRENSStandardSwapListGenerator, self).__init__(n_replicas, param_list)
        
